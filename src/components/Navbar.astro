---
import { Image } from 'astro:assets';
import logo from '/public/assets/homepageAssets/logo.png';

const navItems = [
  { 
    label: "ABOUT",
    hasDropdown: true,
    dropdownItems: [
      { label: "About Us", href: "/about-us" },
      { label: "Our Team", href: "/team" },
      { label: "Board of Directors", href: "/board-of-directors" },
      { label: "Programs", href: "/amplio-ghana" },
      { label: "Global Partners", href: "/partners" },
      { label: "Financials", href: "/financial-and-990s"}
    ]
  },
  { 
    label: "SOLUTIONS", 
    hasDropdown: true,
    dropdownItems: [
      { label: "Why Talking Book", href: "/why-talking-books" },
      { label: "Our Technology", href: "/technology" },
      { label: "Basic Service Package", href: "/basic-service-package" },
      { label: "Consulting Services", href: "/consulting-services" },
      { label: "SBC Impact Designer", href: "/sbc" },
      { label: "Ways To Listen", href: "/ways-to-listen" },
    ]
  },
  { label: "IMPACT", href: "/impact" },
  { label: "BLOG", href: "/blog" },
  { 
    label: "RESOURCES",
    href: "/resources",
    hasDropdown: true,
    dropdownItems: [
      { label: "Case Studies", href: "/case-studies" },
      { label: "videos", href: "/videos" },
      { label: "Gudies and Brochures", href: "/guides-and-brochures" },
      { label: "Press", href: "/press" },
    ]
  },
  { label: "CONTACT", href: "/contact" },
];
---

<div class="fixed top-0 left-0 right-0 z-50 bg-white border-b border-gray-300">
   <nav class="transition-shadow duration-200">
     <div class="max-w-[2000px] mx-auto px-4 lg:px-56">
    <div class="flex justify-between items-center h-20 lg:h-28">
      <a href="/" class="flex items-center" aria-label="Go to homepage">
        <Image 
          src={logo}
          alt="Amplio"
          class="h-12 lg:h-16 w-auto"
          width={200}
          height={64}
          loading="eager"
        />
      </a>

      <div class="hidden lg:flex items-center space-x-4">
        {
          navItems.map((item) => (
            <div class="relative group">
              {item.hasDropdown ? (
                <button 
                  type="button"
                  class="text-gray-700 hover:text-emerald-600 text-[14px] transition-colors font-semibold flex items-center"
                  aria-expanded="false"
                  aria-controls={`dropdown-${item.label}`}
                >
                  {item.label}
                  <svg 
                    class="w-4 h-4 ml-1" 
                    fill="none" 
                    stroke="currentColor" 
                    viewBox="0 0 24 24"
                    aria-hidden="true"
                  >
                    <path 
                      stroke-linecap="round" 
                      stroke-linejoin="round" 
                      stroke-width="2" 
                      d="M19 9l-7 7-7-7"
                    />
                  </svg>
                </button>
              ) : (
                <a
                  href={item.href}
                  class="text-gray-700 hover:text-emerald-600 text-[14px] transition-colors font-semibold"
                >
                  {item.label}
                </a>
              )}
              
              {item.hasDropdown && (
                <div 
                  id={`dropdown-${item.label}`}
                  class="absolute top-full left-0 mt-2 w-48 bg-white shadow-lg rounded-md opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200"
                  role="menu"
                >
                  {item.dropdownItems.map((dropdownItem) => (
                    <a
                      href={dropdownItem.href}
                      class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-emerald-600"
                      role="menuitem"
                    >
                      {dropdownItem.label}
                    </a>
                  ))}
                </div>
              )}
            </div>
          ))
        }
        
        <a
          href="/donate"
          class="bg-[#EE8060] text-white px-8 py-3 rounded-md hover:bg-[#ff4a33] transition-colors"
        >
          DONATE
        </a>
      </div>

      <button 
        class="block lg:hidden p-2 z-50"
        id="mobile-menu-button"
        aria-label="Toggle mobile menu"
        aria-expanded="false"
        aria-controls="mobile-menu"
      >
        <svg
          class="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"
          />
        </svg>
      </button>
    </div>
  </div>

  <div
    class="lg:hidden hidden absolute top-[80px] left-0 right-0 bg-white shadow-lg border-t border-gray-200"
    id="mobile-menu"
    role="menu"
  >
    <div class="px-4 py-4 max-h-[calc(100vh-80px)] overflow-y-auto">
      {
        navItems.map((item) => (
          <div class="py-2 border-b border-gray-100 last:border-0">
            {item.hasDropdown ? (
              <button
                type="button"
                class="w-full text-left flex items-center justify-between text-gray-700 hover:text-emerald-600 py-2"
                onclick={`toggleMobileDropdown('${item.label}')`}
                aria-expanded="false"
                aria-controls={`mobile-dropdown-${item.label}`}
              >
                {item.label}
                <svg 
                  class="w-4 h-4 transition-transform duration-200" 
                  fill="none" 
                  stroke="currentColor" 
                  viewBox="0 0 24 24"
                  aria-hidden="true"
                >
                  <path 
                    stroke-linecap="round" 
                    stroke-linejoin="round" 
                    stroke-width="2" 
                    d="M19 9l-7 7-7-7"
                  />
                </svg>
              </button>
            ) : (
              <a
                href={item.href}
                class="block py-2 text-gray-700 hover:text-emerald-600"
              >
                {item.label}
              </a>
            )}
            
            {item.hasDropdown && (
              <div
                class="hidden pl-4 mt-2 space-y-2"
                id={`mobile-dropdown-${item.label}`}
                role="menu"
              >
                {item.dropdownItems.map((dropdownItem) => (
                  <a
                    href={dropdownItem.href}
                    class="block py-2 text-sm text-gray-600 hover:text-emerald-600"
                    role="menuitem"
                  >
                    {dropdownItem.label}
                  </a>
                ))}
              </div>
            )}
          </div>
        ))
      }
      
      <a
        href="/donate"
        class="block mt-4 bg-[#EE8060] text-white px-6 py-3 rounded-md hover:bg-[#ff4a33] text-center"
      >
        DONATE
      </a>
    </div>
  </div>
</nav>
</div>

<div class="h-20 lg:h-28"></div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const nav = document.querySelector('nav');
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = mobileMenuButton?.querySelector('svg');
    
    let lastScrollY = window.scrollY;
    
    const handleScroll = () => {
      const currentScrollY = window.scrollY;
      
      if (currentScrollY > 0) {
        nav?.classList.add('shadow-md');
      } else {
        nav?.classList.remove('shadow-md');
      }
      
      if (currentScrollY > lastScrollY) {
        nav?.classList.add('nav-hidden');
      } else {
        nav?.classList.remove('nav-hidden');
      }
      
      lastScrollY = currentScrollY;
    };
    
    window.addEventListener('scroll', handleScroll, { passive: true });

    mobileMenuButton?.addEventListener('click', () => {
      const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
      mobileMenuButton.setAttribute('aria-expanded', (!isExpanded).toString());
      mobileMenu?.classList.toggle('hidden');

      if (menuIcon) {
        menuIcon.innerHTML = isExpanded 
          ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>'
          : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>';
      }
    });
  });

  function toggleMobileDropdown(label: string) {
    const dropdown = document.getElementById(`mobile-dropdown-${label}`);
    const button = dropdown?.previousElementSibling as HTMLButtonElement;
    const isExpanded = button.getAttribute('aria-expanded') === 'true';
    
    button.setAttribute('aria-expanded', (!isExpanded).toString());
    dropdown?.classList.toggle('hidden');
    
    const icon = button.querySelector('svg');
    if (icon) {
      icon.style.transform = isExpanded ? 'rotate(0deg)' : 'rotate(180deg)';
    }
  }

  window.toggleMobileDropdown = toggleMobileDropdown;
</script>

<style>
  nav {
    transition: box-shadow 0.3s ease-in-out, transform 0.3s ease-in-out;
  }

  .nav-hidden {
    transform: translateY(-100%);
  }

  .group:hover .absolute {
    transition: all 0.2s ease-in-out;
  }

  #mobile-menu {
    max-height: calc(100vh - 80px);
    overflow-y: auto;
  }

  body.menu-open {
    overflow: hidden;
  }

  #mobile-menu::-webkit-scrollbar {
    width: 4px;
  }

  #mobile-menu::-webkit-scrollbar-track {
    background: #f1f1f1;
  }

  #mobile-menu::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 2px;
  }
</style>