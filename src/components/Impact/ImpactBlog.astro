---
import { Image } from 'astro:assets';

interface Media {
  id: string;
  alt: string;
  url: string;
  filename: string;
  mimeType: string;
  filesize: number;
  width: number;
  height: number;
}

interface SocialLinks {
  twitter?: string;
  linkedin?: string;
  github?: string;
}

interface Author {
  id: string;
  username: string;
  name: string;
  profileImage: Media;
  bio?: string;
  socialLinks?: SocialLinks;
}

interface Category {
  id: string;
  name: string;
  slug: string;
}

interface ApiPost {
  id: string;
  title: string;
  featuredImage: Media;
  author: Author;
  publishedDate: string;
  estimatedReadTime: number;
  status: 'draft' | 'published';
  category: Category;
  content?: {
    root: {
      children: any[];
    }
  };
}

interface TransformedPost {
  id: string;
  title: string;
  featuredImage: Media & { url: string };
  author: Omit<Author, 'profileImage'> & {
    profileImage?: Media & { url: string };
  };
  publishedDate: string;
  estimatedReadTime: number;
  status: 'draft' | 'published';
  category: Category;
  excerpt?: string;
}

interface ApiResponse {
  docs: ApiPost[];
  totalDocs: number;
  limit: number;
  totalPages: number;
  page: number;
  pagingCounter: number;
  hasPrevPage: boolean;
  hasNextPage: boolean;
  prevPage: number | null;
  nextPage: number | null;
}

const PAYLOAD_URL = import.meta.env.PUBLIC_PAYLOAD_URL;

// Extract text content from the post's content 
function extractExcerpt(post: ApiPost): string {
  if (!post.content || !post.content.root || !post.content.root.children) {
    return '';
  }

  // Look for the first paragraph in the content
  for (const child of post.content.root.children) {
    if (child.type === 'paragraph' && child.children) {
      const textContent = child.children
         //@ts-ignore
        .filter(textNode => textNode.type === 'text')
        //@ts-ignore
        .map(textNode => textNode.text)
        .join(' ');
      
      if (textContent) {
        return textContent;
      }
    }
  }

  return '';
}

async function fetchCategoryPosts(): Promise<TransformedPost[]> {
  try {
    const response = await fetch(
      `${PAYLOAD_URL}/api/posts?depth=2&where[category.slug][equals]=tech`, 
      {
        headers: { 'Content-Type': 'application/json' },
      }
    );

    const data: ApiResponse = await response.json();

    const transformedPosts = data.docs
      .filter((post): post is ApiPost => post.status === 'published')
      .map((post: ApiPost): TransformedPost => ({
        ...post,
        featuredImage: {
          ...post.featuredImage,
          url: `${PAYLOAD_URL}${post.featuredImage.url}`,
        },
        author: {
          ...post.author,
          profileImage: post.author.profileImage
            ? { ...post.author.profileImage, url: `${PAYLOAD_URL}${post.author.profileImage.url}` }
            : undefined,
        },
        excerpt: extractExcerpt(post),
      }))
      .sort((a, b) => new Date(b.publishedDate).getTime() - new Date(a.publishedDate).getTime())
      .slice(0, 3); // Get latest 3 posts

    return transformedPosts;
  } catch (error) {
    console.error('Error fetching category posts:', error);
    return [];
  }
}

function formatDate(dateString: string): string {
  return new Date(dateString).toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric',
  });
}

// Fetch posts from the specific category
const categoryPosts = await fetchCategoryPosts();
---

{categoryPosts.length > 0 && (
  <section class=" py-20">
    <div class="max-w-[2000px]">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10">
        {categoryPosts.map((post) => (
          <article class="bg-white rounded-xl overflow-hidden shadow-sm hover:shadow-lg transition-shadow duration-300">
            <a href={`/blog/${post.id}`} class="block">
              <div class="aspect-video overflow-hidden">
                <Image 
                  src={post.featuredImage.url} 
                  alt={post.featuredImage.alt}
                  width={post.featuredImage.width}
                  height={post.featuredImage.height}
                  class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                  format="webp"
                />
              </div>
              
              <div class="p-8">
                <div class="flex items-center mb-6">
                  <div class="w-14 h-14 rounded-full overflow-hidden mr-4 border-2 border-gray-100">
                    {post.author.profileImage?.url && (
                      <Image 
                        src={post.author.profileImage.url} 
                        alt={`${post.author.name}`}
                        width="40"
                        height="40"
                        class="w-full h-full object-cover"
                        format="webp"
                      />
                    )}
                  </div>
                  <div>
                    <div class="flex items-center gap-2">
                      <p class="font-medium text-gray-900">{post.author.name}</p>                   
                    </div>
                    <div class="flex items-center text-sm text-gray-500 mt-1">
                      <time datetime={post.publishedDate}>
                        {formatDate(post.publishedDate)}
                      </time>
                      <span class="mx-2">â€¢</span>
                      <span>{post.estimatedReadTime} min read</span>
                    </div>
                  </div>
                </div>
                
                <h3 class="font-bold text-gray-900 mb-3 line-clamp-3 hover:text-cyan-600 transition-colors">
                  {post.title}
                </h3>
                
                {post.excerpt && (
                  <p class="text-gray-600 line-clamp-2 text-sm">
                    {post.excerpt}
                  </p>
                )}
              </div>
            </a>
          </article>
        ))}
      </div>
    </div>
  </section>
)}