---
import { Image } from 'astro:assets';
import { carouselItems } from '../../constants';
import triangleImage from '../../assets/programs/triangle.png';

const CAROUSEL_WIDTH = 1920; 
const CAROUSEL_HEIGHT = 1080;
---

<div>
  <p class="text-gray-800 mt-10 text-center text-lg px-4 md:px-0">
    Amplio Ghana delivers Talking Book programs in Ghana and West Africa.
    <br class="hidden md:block" />
    We can partner with you and your team every step of the way.
  </p>

  {/* Carousel Container */}
  <div class="relative w-full lg:h-screen h-[400px] mt-8 md:mt-12 overflow-hidden">
    <div id="carousel" class="relative w-full h-full">
      {carouselItems.map((item, index) => (
        <div 
          class="carousel-slide absolute inset-0 opacity-0 transition-opacity duration-500 ease-in-out"
          data-index={index}
        >
          {/* Image Container */}
          <div class="absolute inset-0">
            <Image 
              src={item.image} 
              alt={`Slide ${index + 1}`}
              width={CAROUSEL_WIDTH}
              height={CAROUSEL_HEIGHT}
              class="w-full h-full object-cover"
            />
            <div class="absolute inset-0 bg-black/10"></div>
          </div>
          
          <div class="absolute inset-0 flex items-center px-4 md:px-36">
          <div class="container mx-auto px-2 md:px-6">
            {index === 0 && (
              <div class="relative mt-24 md:mt-48 bg-[#4D5696]/80 text-white p-4 max-w-lg rounded-lg flex flex-col items-center text-center mx-auto md:mx-0">
                <div class="absolute mt-4 md:mt-8 left-4 md:left-16 w-24 md:w-40">
                  <Image 
                    src={triangleImage}
                    alt="Anthem Awards 2023 Winner"
                    width={192}
                    height={192}
                    class="w-32 md:w-48 h-32 md:h-48"
                  />
                </div>

                  <div class="relative">
                    <h2 class="text-2xl md:text-4xl font-bold mt-12 leading-tight">
                      <span class="relative z-10 italic ml-16 md:ml-32">{item.title}</span>
                      <span class="block font-normal italic ml-12 md:ml-20">{item.subtitle}</span>
                      <span class="block font-extrabold ml-12 md:ml-20 text-3xl md:text-5xl">Outreach</span>
                    </h2>
                    
                    <div class="mt-4 text-right">
                      <a href={item.buttonLink} class="inline-block underline text-white hover:text-blue-200 transition-colors">
                        {item.buttonText}
                      </a>
                    </div>
                  </div>
                </div>
              )}

              {index === 1 && (
                <div class="bg-white/80 text-center mt-24 md:mt-0 text-blue-800 p-4 md:p-8 max-w-md rounded-lg mx-auto md:mx-0">
                  <div class="mb-4">
                    <span class="text-2xl md:text-5xl">{item.title}</span>
                    <br />
                    <span class="text-2xl md:text-5xl font-bold">{item.subtitle}</span>
                  </div>
                  <a href={item.buttonLink} 
                     class="inline-block bg-cyan-400 text-white px-4 py-2 rounded-md hover:bg-cyan-500 transition-colors">
                    {item.buttonText}
                  </a>
                </div>
              )}
              
              {index === 2 && (
                <div class="mt-24 md:mt-0 ml-4 md:ml-20">
                  <div class="mb-4 text-cyan-400">
                    <span class="text-3xl md:text-6xl">{item.title}</span>
                    <br/>
                    <span class="text-3xl md:text-6xl">Communities</span>
                    <br />
                    <span class="font-extrabold text-2xl md:text-5xl">{item.subtitle}</span>
                  </div>
                  <a href={item.buttonLink} 
                     class="inline-block bg-cyan-400 text-white px-4 py-2 rounded-md hover:bg-cyan-500 transition-colors">
                    {item.buttonText}
                  </a>
                </div>
              )}
            </div>
          </div>
        </div>
      ))}
      
      {/* Navigation Arrows */}
      <button 
        class="absolute left-2 md:left-16 top-1/2 -translate-y-1/2 bg-white/30 hover:bg-white/50 p-1 md:p-2 rounded-full transition-colors z-20"
        id="prevButton"
        aria-label="Previous slide"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 md:h-10 md:w-10" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      
      <button 
        class="absolute right-2 md:right-16 top-1/2 -translate-y-1/2 bg-white/30 hover:bg-white/50 p-1 md:p-2 rounded-full transition-colors z-20"
        id="nextButton"
        aria-label="Next slide"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 md:h-10 md:w-10" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  let currentSlide = 0;
  const slides = document.querySelectorAll('.carousel-slide');
  const totalSlides = slides.length;
  let autoplayInterval: number;

  function showSlide(index: number) {
    slides.forEach((slide) => {
      (slide as HTMLElement).style.opacity = '0';
      (slide as HTMLElement).style.zIndex = '0';
    });
    
    (slides[index] as HTMLElement).style.opacity = '1';
    (slides[index] as HTMLElement).style.zIndex = '1';
    currentSlide = index;
  }

  function nextSlide() {
    showSlide((currentSlide + 1) % totalSlides);
  }

  function prevSlide() {
    showSlide((currentSlide - 1 + totalSlides) % totalSlides);
  }

  // Initialize carousel
  showSlide(0);

  // Event listeners
  document.getElementById('nextButton')?.addEventListener('click', () => {
    nextSlide();
    resetAutoplay();
  });

  document.getElementById('prevButton')?.addEventListener('click', () => {
    prevSlide();
    resetAutoplay();
  });

  function startAutoplay() {
    //@ts-ignore
    autoplayInterval = setInterval(nextSlide, 5000);
  }

  function resetAutoplay() {
    clearInterval(autoplayInterval);
    startAutoplay();
  }

  startAutoplay();

  // Cleanup
  document.addEventListener('unload', () => {
    clearInterval(autoplayInterval);
  });
</script>