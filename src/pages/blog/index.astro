---
import Layout from '../../layouts/Layout.astro';
import type { ApiResponse, Post, Category, CategoryResponse } from '../../types/payload';
import { MoreVertical, Share2 } from 'lucide-react';

function highlightText(text: string, searchQuery: string): string {
  if (!searchQuery) return text;
  const regex = new RegExp(`(${searchQuery})`, 'gi');
  return text.replace(regex, '<mark class="bg-yellow-200">$1</mark>');
}

async function fetchCategories(): Promise<Category[]> {
  try {
    const response = await fetch('http://localhost:3000/api/categories');
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data: CategoryResponse = await response.json();
    return data.docs;
  } catch (error) {
    console.error('Error fetching categories:', error);
    return [];
  }
}

async function fetchPosts(category?: string, search?: string): Promise<Post[]> {
  try {
    const params = new URLSearchParams();
    params.append('depth', '2'); 
    
    if (category) {
      params.append('where[category.slug][equals]', category);
    }
    
    if (search) {
      const searchString = search.trim();
      params.append('where[or][0][title][contains]', searchString);
      params.append('where[or][1][content][contains]', searchString);
      params.append('where[or][2][category.name][contains]', searchString);
      params.append('where[or][3][author.name][contains]', searchString);
    }
    
    const PAYLOAD_URL = import.meta.env.PUBLIC_PAYLOAD_URL || 'http://localhost:3000';
    const response = await fetch(`${PAYLOAD_URL}/api/posts?${params.toString()}`);

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data: ApiResponse = await response.json();
    
    return data.docs
      .filter(post => post.status === 'published')
      .map(post => ({
        ...post,
        featuredImage: {
          ...post.featuredImage,
          url: `${PAYLOAD_URL}${post.featuredImage.url}`,
        },
        author: {
          ...post.author,
          profileImage: post.author.profileImage ? {
            ...post.author.profileImage,
            url: `${PAYLOAD_URL}${post.author.profileImage.url}`,
          } : undefined,
        },
      }))
      .sort((a, b) => new Date(b.publishedDate).getTime() - new Date(a.publishedDate).getTime());
  } catch (error) {
    console.error('Error fetching posts:', error);
    return [];
  }
}

function formatDate(dateString: string): string {
  return new Date(dateString).toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric'
  });
}

// Get current URL parameters
const searchParams = new URL(Astro.request.url).searchParams;
const searchQuery = searchParams.get('search') || '';
const currentCategory = searchParams.get('category') || '';

// Fetch initial data
const categories = await fetchCategories();
const posts = await fetchPosts(currentCategory, searchQuery);

// Split categories into main and more
const mainCategories = categories.slice(0, 4);
const moreCategories = categories.slice(4);

// Create search context message
const getSearchContext = () => {
  if (searchQuery && currentCategory) {
    return `${posts.length} results for "${searchQuery}" in "${categories.find(c => c.slug === currentCategory)?.name}"`;
  } else if (searchQuery) {
    return `${posts.length} results for "${searchQuery}"`;
  } else if (currentCategory) {
    return `${posts.length} posts in "${categories.find(c => c.slug === currentCategory)?.name}"`;
  }
  return '';
};

const searchContext = getSearchContext();
---

<Layout title="Amplio Blog">
  <main class="max-w-[2000px] mx-auto lg:mt-20 border border-t px-4 md:px-8 lg:px-56 py-12">
    <h1 class="text-5xl font-bold text-center mb-12">Amplio Blog</h1>
    
    <!-- Navigation and Search Section -->
    <div class="relative flex flex-wrap items-center justify-between gap-4 mb-8">
      <!-- Categories Navigation -->
      <div class="flex-1 flex flex-wrap items-center gap-6">
        <a
          href="/blog"
          class={`text-gray-600 hover:text-cyan-600 transition-colors ${!currentCategory ? 'text-cyan-600 font-medium' : ''}`}
        >
          All Posts
        </a>

        {mainCategories.map((category) => (
          <a
            href={`/blog?category=${category.slug}${searchQuery ? `&search=${searchQuery}` : ''}`}
            class={`text-gray-600 hover:text-cyan-600 transition-colors ${
              currentCategory === category.slug ? 'text-cyan-600 font-medium' : ''
            }`}
          >
            {category.name}
          </a>
        ))}
        
        {moreCategories.length > 0 && (
          <div class="relative group">
            <button class="flex items-center gap-1 text-gray-600 hover:text-cyan-600 transition-colors">
              More
              <svg 
                class="w-4 h-4"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <polyline points="6 9 12 15 18 9" />
              </svg>
            </button>
            
            <div class="hidden group-hover:block absolute top-full left-0 mt-2 w-48 bg-white rounded-lg shadow-lg py-2 z-10">
              {moreCategories.map((category) => (
                <a
                  href={`/blog?category=${category.slug}${searchQuery ? `&search=${searchQuery}` : ''}`}
                  class={`block px-4 py-2 text-gray-600 hover:bg-gray-50 hover:text-cyan-600 transition-colors ${
                    currentCategory === category.slug ? 'text-cyan-600 bg-gray-50' : ''
                  }`}
                >
                  {category.name}
                </a>
              ))}
            </div>
          </div>
        )}
      </div>
      
      <!-- Search and Login Container -->
      <div class="flex items-center gap-4">
        <!-- Search Feature -->
        <div class="relative" x-data="search">
          <!-- Search Icon Button -->
          <button
            @click="isSearching = !isSearching"
            class="p-2 text-gray-600 hover:text-cyan-600 transition-colors"
            x-show="!isSearching"
          >
            <svg class="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="11" cy="11" r="8" />
              <line x1="21" y1="21" x2="16.65" y2="16.65" />
            </svg>
          </button>
          
          <!-- Search Form  -->
          <form
            x-show="isSearching"
            x-transition:enter="transition ease-out duration-200"
            x-transition:enter-start="opacity-0 transform scale-95"
            x-transition:enter-end="opacity-100 transform scale-100"
            x-transition:leave="transition ease-in duration-100"
            x-transition:leave-start="opacity-100 transform scale-100"
            x-transition:leave-end="opacity-0 transform scale-95"
            class="absolute right-0 top-[-20px] flex items-center"
            @submit.prevent="handleSearch"
          >
            <div class="relative flex items-center bg-white rounded-lg shadow-lg">
              <input
                type="text"
                name="search"
                placeholder="Search posts..."
                value={searchQuery}
                class="w-64 pl-4 pr-16 py-2 rounded-lg border-0 focus:ring-2 focus:ring-cyan-500"
                @keyup.escape="isSearching = false"
              />
              
              <!-- Close Search Button -->
              <button
                type="button"
                @click="isSearching = false"
                class="absolute right-2 p-1.5 text-gray-400 hover:text-gray-600 transition-colors"
              >
                <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <line x1="18" y1="6" x2="6" y2="18" />
                  <line x1="6" y1="6" x2="18" y2="18" />
                </svg>
              </button>

              <!-- Clear Search Text Button -->
              {searchQuery && (
                <button
                  type="button"
                  @click="clearSearch"
                  class="absolute right-10 p-1.5 text-gray-400 hover:text-gray-600 transition-colors"
                >
                  <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="10" />
                    <path d="M15 9l-6 6M9 9l6 6" />
                  </svg>
                </button>
              )}
            </div>
          </form>
        </div>

        <!-- Login/Sign up Button -->
        <a
          href="/login"
          class="inline-flex items-center px-4 py-2 border border-purple-600 text-purple-600 rounded-lg hover:bg-purple-600 hover:text-white transition-colors duration-200"
        >
          Log in / Sign up
        </a>
      </div>
    </div>
    </div>

    {(() => {
      // Case 1: No posts found for search or category
      if ((searchQuery || currentCategory) && posts.length === 0) {
        return (
          <div class="text-center py-16">
            <div class="mb-4">
              <svg 
                class="w-16 h-16 mx-auto text-gray-400"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <circle cx="11" cy="11" r="8" />
                <line x1="21" y1="21" x2="16.65" y2="16.65" />
              </svg>
            </div>
            <h2 class="text-2xl font-semibold text-gray-900 mb-2">No posts found</h2>
            <p class="text-gray-600 mb-6">
              {searchQuery 
                ? `We couldn't find any posts matching "${searchQuery}"${currentCategory ? ` in the selected category` : ''}.`
                : "We couldn't find any posts in this category."}
            </p>
            <a 
              href="/blog" 
              class="inline-flex items-center justify-center px-6 py-3 rounded-md text-white bg-cyan-600 hover:bg-cyan-700 transition-colors"
            >
              View all posts
            </a>
          </div>
        );
      }

      // Case 2: Search or category results found
      if (searchQuery || currentCategory) {
        return (
          <>
            {searchContext && (
              <div class="mb-8 text-xl font-semibold text-gray-900">
                {searchContext}
              </div>
            )}
            
            <div class="space-y-8">
              {posts.map((post) => (
                <article class="flex flex-col md:flex-row gap-8 p-6 bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow">
                  <div class="md:w-1/3">
                    <a href={`/blog/${post.id}`} class="block">
                      <img 
                        src={post.featuredImage.url} 
                        alt={post.featuredImage.alt}
                        class="w-full h-48 object-cover rounded-lg"
                      />
                    </a>
                  </div>
                  
                  <div class="md:w-2/3 space-y-4">
                  <div class = " flex justify-between items-center">
                    <div class="flex items-center gap-4">
                      <div class="w-10 h-10 rounded-full overflow-hidden border-2 border-gray-100">
                        {post.author.profileImage && (
                          <img 
                            src={post.author.profileImage.url} 
                            alt={`${post.author.name}'s profile`}
                            class="w-full h-full object-cover"
                          />
                        )}
                      </div>
                      <div>
                        <p class="font-medium text-gray-900">{post.author.name}</p>
                        <div class="flex items-center text-sm text-gray-500">
                          <time datetime={post.publishedDate}>
                            {formatDate(post.publishedDate)}
                          </time>
                          <span class="mx-2">•</span>
                          <span>{post.estimatedReadTime} min read</span>
                        </div>
                      </div>
                    </div>

                    <div class="relative group">
                    <button class="p-2 hover:bg-gray-100 rounded-full">
                      <MoreVertical className="w-5 h-5 text-gray-500" />
                    </button>
                    <div class="absolute left-0 mt-1 w-32 bg-white shadow-lg rounded-md hidden group-hover:block z-10">
                      <button class="w-full px-4 py-1 text-right text-gray-700 hover:bg-gray-100 flex items-center">
                        <Share2 className="w-4 h-4 mr-2" />
                        Share
                      </button>
                    </div>
                  </div>

                  </div>
                    
                    <div>
                      <a 
                        href={`/blog/${post.id}`}
                        class="block group"
                      >
                        <h2 
                          class="text-xl text-gray-900 group-hover:text-cyan-600 transition-colors mb-2"
                          set:html={highlightText(post.title, searchQuery)}
                        />
                        <p 
                          class="text-gray-600 line-clamp-2"
                          set:html={highlightText(
                            post.content.root.children.find(child => child.children?.[0]?.text)?.children[0]?.text || '',
                            searchQuery
                          )}
                        />
                      </a>
                    </div>
                    
                    <div class="flex items-center gap-3">
                      <a
                        href={`/blog?category=${post.category.slug}`}
                        class="text-sm px-3 py-1 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors"
                      >
                        {post.category.name}
                      </a>
                    </div>
                  </div>
                </article>
              ))}
            </div>
          </>
        );
      }

      // Case 3: Default view (all posts)
      // Case 3: Default view (all posts)
      return (
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10">
          {posts.map((post) => (
            <article class="bg-white rounded-xl overflow-hidden shadow-sm hover:shadow-lg transition-shadow duration-300">
              <a href={`/blog/${post.id}`} class="block">
                <div class="aspect-video overflow-hidden">
                  <img 
                    src={post.featuredImage.url} 
                    alt={post.featuredImage.alt}
                    width={post.featuredImage.width}
                    height={post.featuredImage.height}
                    class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                  />
                </div>
                
                <div class="p-8">
                  <div class="flex items-center mb-6">
                    <div class="w-14 h-14 rounded-full overflow-hidden mr-4 border-2 border-gray-100">
                      {post.author.profileImage && (
                        <img 
                          src={post.author.profileImage.url} 
                          alt={`${post.author.name}'s profile picture`}
                          width="40"
                          height="40"
                          class="w-full h-full object-cover"
                        />
                      )}
                    </div>
                    <div>
                      <div class="flex items-center gap-2">
                        <p class="font-medium text-gray-900">{post.author.name}</p>
                      </div>
                      <div class="flex items-center text-sm text-gray-500 mt-1">
                        <time datetime={post.publishedDate}>
                          {formatDate(post.publishedDate)}
                        </time>
                        <span class="mx-2">•</span>
                        <span>{post.estimatedReadTime} min read</span>
                      </div>
                    </div>
                  </div>
                  
                  <h3 class="font-bold text-gray-900 mb-3 line-clamp-3 hover:text-cyan-600 transition-colors">
                    {post.title}
                  </h3>
                </div>
              </a>
            </article>
          ))}
        </div>
      );
    })()}
  </main>
</Layout>

<script>
  document.addEventListener('alpine:init', () => {
    window.Alpine.data('search', () => ({
      isSearching: false,
      
      handleSearch(event: Event) {
        event.preventDefault();
        const form = event.target as HTMLFormElement;
        const searchInput = form.querySelector('input[name="search"]') as HTMLInputElement;
        const searchValue = searchInput.value.trim();
        
        const currentParams = new URLSearchParams(window.location.search);
        const category = currentParams.get('category');
        
        const newParams = new URLSearchParams();
        if (category) {
          newParams.set('category', category);
        }
        if (searchValue) {
          newParams.set('search', searchValue);
        }
        
        window.location.href = `${window.location.pathname}${newParams.toString() ? `?${newParams.toString()}` : ''}`;
      },

      clearSearch() {
        const currentParams = new URLSearchParams(window.location.search);
        currentParams.delete('search');
        window.location.href = `${window.location.pathname}${currentParams.toString() ? `?${currentParams.toString()}` : ''}`;
      }
    }));
  });
</script>